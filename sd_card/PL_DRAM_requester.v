// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="PL_DRAM_requester,hls_ip_2016_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=7,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=0,HLS_SYN_FF=529,HLS_SYN_LUT=599}" *)

module PL_DRAM_requester (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        wdata,
        rdata,
        rdata_ap_vld,
        m_axi_axi_bus_AWVALID,
        m_axi_axi_bus_AWREADY,
        m_axi_axi_bus_AWADDR,
        m_axi_axi_bus_AWID,
        m_axi_axi_bus_AWLEN,
        m_axi_axi_bus_AWSIZE,
        m_axi_axi_bus_AWBURST,
        m_axi_axi_bus_AWLOCK,
        m_axi_axi_bus_AWCACHE,
        m_axi_axi_bus_AWPROT,
        m_axi_axi_bus_AWQOS,
        m_axi_axi_bus_AWREGION,
        m_axi_axi_bus_AWUSER,
        m_axi_axi_bus_WVALID,
        m_axi_axi_bus_WREADY,
        m_axi_axi_bus_WDATA,
        m_axi_axi_bus_WSTRB,
        m_axi_axi_bus_WLAST,
        m_axi_axi_bus_WID,
        m_axi_axi_bus_WUSER,
        m_axi_axi_bus_ARVALID,
        m_axi_axi_bus_ARREADY,
        m_axi_axi_bus_ARADDR,
        m_axi_axi_bus_ARID,
        m_axi_axi_bus_ARLEN,
        m_axi_axi_bus_ARSIZE,
        m_axi_axi_bus_ARBURST,
        m_axi_axi_bus_ARLOCK,
        m_axi_axi_bus_ARCACHE,
        m_axi_axi_bus_ARPROT,
        m_axi_axi_bus_ARQOS,
        m_axi_axi_bus_ARREGION,
        m_axi_axi_bus_ARUSER,
        m_axi_axi_bus_RVALID,
        m_axi_axi_bus_RREADY,
        m_axi_axi_bus_RDATA,
        m_axi_axi_bus_RLAST,
        m_axi_axi_bus_RID,
        m_axi_axi_bus_RUSER,
        m_axi_axi_bus_RRESP,
        m_axi_axi_bus_BVALID,
        m_axi_axi_bus_BREADY,
        m_axi_axi_bus_BRESP,
        m_axi_axi_bus_BID,
        m_axi_axi_bus_BUSER,
        dram_write,
        addr
);

parameter    ap_ST_st1_fsm_0 = 14'b1;
parameter    ap_ST_st2_fsm_1 = 14'b10;
parameter    ap_ST_st3_fsm_2 = 14'b100;
parameter    ap_ST_st4_fsm_3 = 14'b1000;
parameter    ap_ST_st5_fsm_4 = 14'b10000;
parameter    ap_ST_st6_fsm_5 = 14'b100000;
parameter    ap_ST_st7_fsm_6 = 14'b1000000;
parameter    ap_ST_st8_fsm_7 = 14'b10000000;
parameter    ap_ST_st9_fsm_8 = 14'b100000000;
parameter    ap_ST_st10_fsm_9 = 14'b1000000000;
parameter    ap_ST_st11_fsm_10 = 14'b10000000000;
parameter    ap_ST_st12_fsm_11 = 14'b100000000000;
parameter    ap_ST_st13_fsm_12 = 14'b1000000000000;
parameter    ap_ST_st14_fsm_13 = 14'b10000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_7 = 32'b111;
parameter    C_M_AXI_AXI_BUS_ID_WIDTH = 1;
parameter    C_M_AXI_AXI_BUS_ADDR_WIDTH = 32;
parameter    C_M_AXI_AXI_BUS_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_M_AXI_AXI_BUS_AWUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_BUS_ARUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_BUS_WUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_BUS_RUSER_WIDTH = 1;
parameter    C_M_AXI_AXI_BUS_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_AXI_BUS_TARGET_ADDR = 0;
parameter    C_M_AXI_AXI_BUS_USER_VALUE = 0;
parameter    C_M_AXI_AXI_BUS_PROT_VALUE = 0;
parameter    C_M_AXI_AXI_BUS_CACHE_VALUE = 3;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv4_F = 4'b1111;

parameter C_M_AXI_AXI_BUS_WSTRB_WIDTH = (C_M_AXI_AXI_BUS_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_WSTRB_WIDTH = (C_M_AXI_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] wdata;
output  [31:0] rdata;
output   rdata_ap_vld;
output   m_axi_axi_bus_AWVALID;
input   m_axi_axi_bus_AWREADY;
output  [C_M_AXI_AXI_BUS_ADDR_WIDTH - 1 : 0] m_axi_axi_bus_AWADDR;
output  [C_M_AXI_AXI_BUS_ID_WIDTH - 1 : 0] m_axi_axi_bus_AWID;
output  [7:0] m_axi_axi_bus_AWLEN;
output  [2:0] m_axi_axi_bus_AWSIZE;
output  [1:0] m_axi_axi_bus_AWBURST;
output  [1:0] m_axi_axi_bus_AWLOCK;
output  [3:0] m_axi_axi_bus_AWCACHE;
output  [2:0] m_axi_axi_bus_AWPROT;
output  [3:0] m_axi_axi_bus_AWQOS;
output  [3:0] m_axi_axi_bus_AWREGION;
output  [C_M_AXI_AXI_BUS_AWUSER_WIDTH - 1 : 0] m_axi_axi_bus_AWUSER;
output   m_axi_axi_bus_WVALID;
input   m_axi_axi_bus_WREADY;
output  [C_M_AXI_AXI_BUS_DATA_WIDTH - 1 : 0] m_axi_axi_bus_WDATA;
output  [C_M_AXI_AXI_BUS_WSTRB_WIDTH - 1 : 0] m_axi_axi_bus_WSTRB;
output   m_axi_axi_bus_WLAST;
output  [C_M_AXI_AXI_BUS_ID_WIDTH - 1 : 0] m_axi_axi_bus_WID;
output  [C_M_AXI_AXI_BUS_WUSER_WIDTH - 1 : 0] m_axi_axi_bus_WUSER;
output   m_axi_axi_bus_ARVALID;
input   m_axi_axi_bus_ARREADY;
output  [C_M_AXI_AXI_BUS_ADDR_WIDTH - 1 : 0] m_axi_axi_bus_ARADDR;
output  [C_M_AXI_AXI_BUS_ID_WIDTH - 1 : 0] m_axi_axi_bus_ARID;
output  [7:0] m_axi_axi_bus_ARLEN;
output  [2:0] m_axi_axi_bus_ARSIZE;
output  [1:0] m_axi_axi_bus_ARBURST;
output  [1:0] m_axi_axi_bus_ARLOCK;
output  [3:0] m_axi_axi_bus_ARCACHE;
output  [2:0] m_axi_axi_bus_ARPROT;
output  [3:0] m_axi_axi_bus_ARQOS;
output  [3:0] m_axi_axi_bus_ARREGION;
output  [C_M_AXI_AXI_BUS_ARUSER_WIDTH - 1 : 0] m_axi_axi_bus_ARUSER;
input   m_axi_axi_bus_RVALID;
output   m_axi_axi_bus_RREADY;
input  [C_M_AXI_AXI_BUS_DATA_WIDTH - 1 : 0] m_axi_axi_bus_RDATA;
input   m_axi_axi_bus_RLAST;
input  [C_M_AXI_AXI_BUS_ID_WIDTH - 1 : 0] m_axi_axi_bus_RID;
input  [C_M_AXI_AXI_BUS_RUSER_WIDTH - 1 : 0] m_axi_axi_bus_RUSER;
input  [1:0] m_axi_axi_bus_RRESP;
input   m_axi_axi_bus_BVALID;
output   m_axi_axi_bus_BREADY;
input  [1:0] m_axi_axi_bus_BRESP;
input  [C_M_AXI_AXI_BUS_ID_WIDTH - 1 : 0] m_axi_axi_bus_BID;
input  [C_M_AXI_AXI_BUS_BUSER_WIDTH - 1 : 0] m_axi_axi_bus_BUSER;
input  [0:0] dram_write;
input  [31:0] addr;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg rdata_ap_vld;

reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [13:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_31;
reg    axi_bus_blk_n_AW;
reg    axi_bus_blk_n_W;
reg    ap_sig_cseq_ST_st9_fsm_8;
reg    ap_sig_109;
reg    axi_bus_blk_n_B;
reg    ap_sig_cseq_ST_st14_fsm_13;
reg    ap_sig_117;
reg    axi_bus_blk_n_AR;
reg    axi_bus_blk_n_R;
reg    ap_sig_cseq_ST_st8_fsm_7;
reg    ap_sig_128;
reg    axi_bus_AWVALID;
wire    axi_bus_AWREADY;
wire   [31:0] axi_bus_AWADDR;
reg    axi_bus_WVALID;
wire    axi_bus_WREADY;
reg    axi_bus_ARVALID;
wire    axi_bus_ARREADY;
wire   [31:0] axi_bus_ARADDR;
wire    axi_bus_RVALID;
reg    axi_bus_RREADY;
wire   [31:0] axi_bus_RDATA;
wire    axi_bus_RLAST;
wire   [0:0] axi_bus_RID;
wire   [0:0] axi_bus_RUSER;
wire   [1:0] axi_bus_RRESP;
wire    axi_bus_BVALID;
reg    axi_bus_BREADY;
wire   [1:0] axi_bus_BRESP;
wire   [0:0] axi_bus_BID;
wire   [0:0] axi_bus_BUSER;
reg    ap_sig_ioackin_axi_bus_ARREADY;
reg    ap_sig_ioackin_axi_bus_AWREADY;
wire   [63:0] tmp_fu_89_p1;
reg    ap_reg_ioackin_axi_bus_ARREADY;
reg    ap_reg_ioackin_axi_bus_AWREADY;
reg    ap_reg_ioackin_axi_bus_WREADY;
reg    ap_sig_ioackin_axi_bus_WREADY;
reg    ap_sig_262;
reg   [13:0] ap_NS_fsm;
reg    ap_sig_308;
reg    ap_sig_121;
reg    ap_sig_311;
reg    ap_sig_102;

// power-on initialization
initial begin
#0 ap_CS_fsm = 14'b1;
#0 ap_reg_ioackin_axi_bus_ARREADY = 1'b0;
#0 ap_reg_ioackin_axi_bus_AWREADY = 1'b0;
#0 ap_reg_ioackin_axi_bus_WREADY = 1'b0;
end

PL_DRAM_requester_axi_bus_m_axi #(
    .USER_DW( 32 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_AXI_BUS_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_AXI_BUS_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_AXI_BUS_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_AXI_BUS_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_AXI_BUS_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_AXI_BUS_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_AXI_BUS_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_AXI_BUS_BUSER_WIDTH ),
    .C_TARGET_ADDR( C_M_AXI_AXI_BUS_TARGET_ADDR ),
    .C_USER_VALUE( C_M_AXI_AXI_BUS_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_AXI_BUS_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_AXI_BUS_CACHE_VALUE ))
PL_DRAM_requester_axi_bus_m_axi_U(
    .AWVALID(m_axi_axi_bus_AWVALID),
    .AWREADY(m_axi_axi_bus_AWREADY),
    .AWADDR(m_axi_axi_bus_AWADDR),
    .AWID(m_axi_axi_bus_AWID),
    .AWLEN(m_axi_axi_bus_AWLEN),
    .AWSIZE(m_axi_axi_bus_AWSIZE),
    .AWBURST(m_axi_axi_bus_AWBURST),
    .AWLOCK(m_axi_axi_bus_AWLOCK),
    .AWCACHE(m_axi_axi_bus_AWCACHE),
    .AWPROT(m_axi_axi_bus_AWPROT),
    .AWQOS(m_axi_axi_bus_AWQOS),
    .AWREGION(m_axi_axi_bus_AWREGION),
    .AWUSER(m_axi_axi_bus_AWUSER),
    .WVALID(m_axi_axi_bus_WVALID),
    .WREADY(m_axi_axi_bus_WREADY),
    .WDATA(m_axi_axi_bus_WDATA),
    .WSTRB(m_axi_axi_bus_WSTRB),
    .WLAST(m_axi_axi_bus_WLAST),
    .WID(m_axi_axi_bus_WID),
    .WUSER(m_axi_axi_bus_WUSER),
    .ARVALID(m_axi_axi_bus_ARVALID),
    .ARREADY(m_axi_axi_bus_ARREADY),
    .ARADDR(m_axi_axi_bus_ARADDR),
    .ARID(m_axi_axi_bus_ARID),
    .ARLEN(m_axi_axi_bus_ARLEN),
    .ARSIZE(m_axi_axi_bus_ARSIZE),
    .ARBURST(m_axi_axi_bus_ARBURST),
    .ARLOCK(m_axi_axi_bus_ARLOCK),
    .ARCACHE(m_axi_axi_bus_ARCACHE),
    .ARPROT(m_axi_axi_bus_ARPROT),
    .ARQOS(m_axi_axi_bus_ARQOS),
    .ARREGION(m_axi_axi_bus_ARREGION),
    .ARUSER(m_axi_axi_bus_ARUSER),
    .RVALID(m_axi_axi_bus_RVALID),
    .RREADY(m_axi_axi_bus_RREADY),
    .RDATA(m_axi_axi_bus_RDATA),
    .RLAST(m_axi_axi_bus_RLAST),
    .RID(m_axi_axi_bus_RID),
    .RUSER(m_axi_axi_bus_RUSER),
    .RRESP(m_axi_axi_bus_RRESP),
    .BVALID(m_axi_axi_bus_BVALID),
    .BREADY(m_axi_axi_bus_BREADY),
    .BRESP(m_axi_axi_bus_BRESP),
    .BID(m_axi_axi_bus_BID),
    .BUSER(m_axi_axi_bus_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(axi_bus_ARVALID),
    .I_ARREADY(axi_bus_ARREADY),
    .I_ARADDR(axi_bus_ARADDR),
    .I_ARID(1'b0),
    .I_ARLEN(ap_const_lv32_1),
    .I_ARSIZE(ap_const_lv3_0),
    .I_ARLOCK(ap_const_lv2_0),
    .I_ARCACHE(ap_const_lv4_0),
    .I_ARQOS(ap_const_lv4_0),
    .I_ARPROT(ap_const_lv3_0),
    .I_ARUSER(1'b0),
    .I_ARBURST(ap_const_lv2_0),
    .I_ARREGION(ap_const_lv4_0),
    .I_RVALID(axi_bus_RVALID),
    .I_RREADY(axi_bus_RREADY),
    .I_RDATA(axi_bus_RDATA),
    .I_RID(axi_bus_RID),
    .I_RUSER(axi_bus_RUSER),
    .I_RRESP(axi_bus_RRESP),
    .I_RLAST(axi_bus_RLAST),
    .I_AWVALID(axi_bus_AWVALID),
    .I_AWREADY(axi_bus_AWREADY),
    .I_AWADDR(axi_bus_AWADDR),
    .I_AWID(1'b0),
    .I_AWLEN(ap_const_lv32_1),
    .I_AWSIZE(ap_const_lv3_0),
    .I_AWLOCK(ap_const_lv2_0),
    .I_AWCACHE(ap_const_lv4_0),
    .I_AWQOS(ap_const_lv4_0),
    .I_AWPROT(ap_const_lv3_0),
    .I_AWUSER(1'b0),
    .I_AWBURST(ap_const_lv2_0),
    .I_AWREGION(ap_const_lv4_0),
    .I_WVALID(axi_bus_WVALID),
    .I_WREADY(axi_bus_WREADY),
    .I_WDATA(wdata),
    .I_WID(1'b0),
    .I_WUSER(1'b0),
    .I_WLAST(1'b0),
    .I_WSTRB(ap_const_lv4_F),
    .I_BVALID(axi_bus_BVALID),
    .I_BREADY(axi_bus_BREADY),
    .I_BRESP(axi_bus_BRESP),
    .I_BID(axi_bus_BID),
    .I_BUSER(axi_bus_BUSER)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_axi_bus_ARREADY <= 1'b0;
    end else begin
        if (ap_sig_121) begin
            if (~((ap_start == 1'b0) | ((dram_write == 1'b0) & (1'b0 == ap_sig_ioackin_axi_bus_ARREADY)) | (~(dram_write == 1'b0) & (1'b0 == ap_sig_ioackin_axi_bus_AWREADY)))) begin
                ap_reg_ioackin_axi_bus_ARREADY <= 1'b0;
            end else if (ap_sig_308) begin
                ap_reg_ioackin_axi_bus_ARREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_axi_bus_AWREADY <= 1'b0;
    end else begin
        if (ap_sig_102) begin
            if (~((ap_start == 1'b0) | ((dram_write == 1'b0) & (1'b0 == ap_sig_ioackin_axi_bus_ARREADY)) | (~(dram_write == 1'b0) & (1'b0 == ap_sig_ioackin_axi_bus_AWREADY)))) begin
                ap_reg_ioackin_axi_bus_AWREADY <= 1'b0;
            end else if (ap_sig_311) begin
                ap_reg_ioackin_axi_bus_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_axi_bus_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_sig_cseq_ST_st9_fsm_8)) begin
            if (~(1'b0 == ap_sig_ioackin_axi_bus_WREADY)) begin
                ap_reg_ioackin_axi_bus_WREADY <= 1'b0;
            end else if ((1'b1 == axi_bus_WREADY)) begin
                ap_reg_ioackin_axi_bus_WREADY <= 1'b1;
            end
        end
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st8_fsm_7) & ~ap_sig_262)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st8_fsm_7) & ~ap_sig_262)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_117) begin
        ap_sig_cseq_ST_st14_fsm_13 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st14_fsm_13 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_31) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_128) begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st8_fsm_7 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_109) begin
        ap_sig_cseq_ST_st9_fsm_8 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st9_fsm_8 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_axi_bus_ARREADY)) begin
        ap_sig_ioackin_axi_bus_ARREADY = axi_bus_ARREADY;
    end else begin
        ap_sig_ioackin_axi_bus_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_axi_bus_AWREADY)) begin
        ap_sig_ioackin_axi_bus_AWREADY = axi_bus_AWREADY;
    end else begin
        ap_sig_ioackin_axi_bus_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_axi_bus_WREADY)) begin
        ap_sig_ioackin_axi_bus_WREADY = axi_bus_WREADY;
    end else begin
        ap_sig_ioackin_axi_bus_WREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0) & (dram_write == 1'b0) & (1'b0 == ap_reg_ioackin_axi_bus_ARREADY))) begin
        axi_bus_ARVALID = 1'b1;
    end else begin
        axi_bus_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0) & ~(dram_write == 1'b0) & (1'b0 == ap_reg_ioackin_axi_bus_AWREADY))) begin
        axi_bus_AWVALID = 1'b1;
    end else begin
        axi_bus_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st14_fsm_13) & ~(axi_bus_BVALID == 1'b0))) begin
        axi_bus_BREADY = 1'b1;
    end else begin
        axi_bus_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((dram_write == 1'b0) & (1'b1 == ap_sig_cseq_ST_st8_fsm_7) & ~ap_sig_262)) begin
        axi_bus_RREADY = 1'b1;
    end else begin
        axi_bus_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st9_fsm_8) & (1'b0 == ap_reg_ioackin_axi_bus_WREADY))) begin
        axi_bus_WVALID = 1'b1;
    end else begin
        axi_bus_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0) & (dram_write == 1'b0))) begin
        axi_bus_blk_n_AR = m_axi_axi_bus_ARREADY;
    end else begin
        axi_bus_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0) & ~(dram_write == 1'b0))) begin
        axi_bus_blk_n_AW = m_axi_axi_bus_AWREADY;
    end else begin
        axi_bus_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st14_fsm_13)) begin
        axi_bus_blk_n_B = m_axi_axi_bus_BVALID;
    end else begin
        axi_bus_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((dram_write == 1'b0) & (1'b1 == ap_sig_cseq_ST_st8_fsm_7))) begin
        axi_bus_blk_n_R = m_axi_axi_bus_RVALID;
    end else begin
        axi_bus_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st9_fsm_8)) begin
        axi_bus_blk_n_W = m_axi_axi_bus_WREADY;
    end else begin
        axi_bus_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((dram_write == 1'b0) & (1'b1 == ap_sig_cseq_ST_st8_fsm_7) & ~ap_sig_262)) begin
        rdata_ap_vld = 1'b1;
    end else begin
        rdata_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if ((~(dram_write == 1'b0) & ~((ap_start == 1'b0) | ((dram_write == 1'b0) & (1'b0 == ap_sig_ioackin_axi_bus_ARREADY)) | (~(dram_write == 1'b0) & (1'b0 == ap_sig_ioackin_axi_bus_AWREADY))))) begin
                ap_NS_fsm = ap_ST_st9_fsm_8;
            end else if (((dram_write == 1'b0) & ~((ap_start == 1'b0) | ((dram_write == 1'b0) & (1'b0 == ap_sig_ioackin_axi_bus_ARREADY)) | (~(dram_write == 1'b0) & (1'b0 == ap_sig_ioackin_axi_bus_AWREADY))))) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            ap_NS_fsm = ap_ST_st3_fsm_2;
        end
        ap_ST_st3_fsm_2 : begin
            ap_NS_fsm = ap_ST_st4_fsm_3;
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            ap_NS_fsm = ap_ST_st6_fsm_5;
        end
        ap_ST_st6_fsm_5 : begin
            ap_NS_fsm = ap_ST_st7_fsm_6;
        end
        ap_ST_st7_fsm_6 : begin
            ap_NS_fsm = ap_ST_st8_fsm_7;
        end
        ap_ST_st8_fsm_7 : begin
            if (~ap_sig_262) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end
        end
        ap_ST_st9_fsm_8 : begin
            if (~(1'b0 == ap_sig_ioackin_axi_bus_WREADY)) begin
                ap_NS_fsm = ap_ST_st10_fsm_9;
            end else begin
                ap_NS_fsm = ap_ST_st9_fsm_8;
            end
        end
        ap_ST_st10_fsm_9 : begin
            ap_NS_fsm = ap_ST_st11_fsm_10;
        end
        ap_ST_st11_fsm_10 : begin
            ap_NS_fsm = ap_ST_st12_fsm_11;
        end
        ap_ST_st12_fsm_11 : begin
            ap_NS_fsm = ap_ST_st13_fsm_12;
        end
        ap_ST_st13_fsm_12 : begin
            ap_NS_fsm = ap_ST_st14_fsm_13;
        end
        ap_ST_st14_fsm_13 : begin
            if (~(axi_bus_BVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_st8_fsm_7;
            end else begin
                ap_NS_fsm = ap_ST_st14_fsm_13;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

always @ (*) begin
    ap_sig_102 = ((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(dram_write == 1'b0));
end

always @ (*) begin
    ap_sig_109 = (1'b1 == ap_CS_fsm[ap_const_lv32_8]);
end

always @ (*) begin
    ap_sig_117 = (1'b1 == ap_CS_fsm[ap_const_lv32_D]);
end

always @ (*) begin
    ap_sig_121 = ((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & (dram_write == 1'b0));
end

always @ (*) begin
    ap_sig_128 = (1'b1 == ap_CS_fsm[ap_const_lv32_7]);
end

always @ (*) begin
    ap_sig_262 = ((dram_write == 1'b0) & (axi_bus_RVALID == 1'b0));
end

always @ (*) begin
    ap_sig_308 = (~(ap_start == 1'b0) & (1'b1 == axi_bus_ARREADY));
end

always @ (*) begin
    ap_sig_31 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_311 = (~(ap_start == 1'b0) & (1'b1 == axi_bus_AWREADY));
end

assign axi_bus_ARADDR = tmp_fu_89_p1;

assign axi_bus_AWADDR = tmp_fu_89_p1;

assign rdata = axi_bus_RDATA;

assign tmp_fu_89_p1 = addr;

endmodule //PL_DRAM_requester
